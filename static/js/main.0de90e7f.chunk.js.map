{"version":3,"sources":["game/style.module.css","containers/App/style.module.css","game/modules/game/settingsConfig.ts","game/modules/game/storyConfig.ts","game/modules/game/circle/preload.ts","game/modules/scenes/assets/dialogs.ts","game/modules/scenes/assets/preloadData.ts","game/modules/scenes/modules/Player.ts","game/modules/scenes/modules/Dialog.ts","game/modules/scenes/modules/Extensions.ts","utils/createGuard.ts","game/modules/scenes/modules/Level.ts","game/modules/levels/_0.ts","game/modules/scenes/Default.ts","game/modules/service/config.ts","game/index.tsx","game/instance.ts","containers/App/index.tsx","index.js"],"names":["module","exports","settingsConfig","delta","width","height","y","buttons","margin","top","right","colors","names","text","triggerDebug","animation","ease","duration","storyConfig","tal","NAME","PORTRAIT","preloadData","data","Object","keys","forEach","key","method","assets","content","load","dialogs","portrait","name","replica","gameResourcesData","image","spritesheet","frameWidth","frameHeight","endFrame","atlas","tilemapTiledJSON","Player","scene","cursors","playerBody","playerVisual","camera","playerParamsConfig","blockMove","left","blocked","time","coordinates","x","world","map","this","createPlayer","createCamera","createTeleport","playerBounce","layer","getObjectLayer","playerData","objects","physics","add","sprite","setAlpha","setBounce","setCircle","collider","body","setCollideWorldBounds","setBounds","widthInPixels","heightInPixels","setCollisionByExclusion","input","keyboard","createCursorKeys","player","cameras","main","smoothMoveCameraTowards","target","smoothFactor","undefined","scrollX","scrollY","anims","create","frames","frameRate","repeat","on","play","destroy","isBlocked","control","resetBlockMove","controlPlayerBody","velocity","angle","maxXVelocity","startedXVelocity","flyXVelocity","wallJumpXVelocity","wallJumpYVelocity","jumpVelocity","inertia","playerAcceleration","oldVelocityX","isDown","down","none","up","setBlockMove","setVelocityX","Math","max","setVelocityY","min","direction","moveBlockTime","canLeftMove","canRightMove","Dialog","sceneId","extensions","wrapper","tweens","activeDialog","sceneDialogs","game","config","sceneWidth","Number","leftBGFrame","setOrigin","rightBGFrame","setPosition","nextButton","setInteractive","setScrollFactor","skipButton","nextDialog","dialogEnd","nextButtonClick","bind","skipButtonClick","centerBG","tileSprite","container","hideTween","targets","showTween","hide","show","createDialogTriggers","tween","onComplete","current","Array","isArray","once","isActive","tweensPlay","dialogId","dialog","id","createPortrait","createName","createText","showDialog","imgName","firstFrame","list","imgFit","make","origin","style","font","color","wordWrap","useAdvancedWrap","portraitWidth","textMargin","actualReplicaNumber","length","valueOfReplica","clearDialog","isSkip","actualReplicaElement","callback","closeDialog","ignoredDialogs","JSON","parse","localStorage","getItem","actualSceneIgnored","push","newActualIgnored","Set","setItem","stringify","hideDialog","debug","createRectangle","triggerObjects","properties","find","value","trigger","zone","enable","setAllowGravity","moves","overlap","createConversation","Extensions","img","maxWidth","maxHeight","widthScale","heightScale","scale","setScale","alpha","graphics","fillStyle","fillRect","props","reduce","acm","upLeftX","apply","upLeftY","upRightX","upRightY","maxY","rectWidth","rectHeight","createGuard","checkedKey","result","arcadeBodyGuard","Level","state","createButtons","createWalls","createCoins","bridgetButtonsLayer","bridgetButtonsList","textures","get","getFrameNames","defaultButton","pushedButton","i","getPropsFromObject","btnX","btnY","button","invisible","buttonZone","Phaser","Physics","Arcade","STATIC_BODY","setTimeout","setTexture","is_wall","activateWall","activateBridge","finishList","texture","finish","fireworks","particles","frame","speed","start","end","blendMode","lifespan","rotate","emitting","coinsLayer","explode","bridgesList","bridges","block","entries","blocks","findCorners","bridgeBody","setImmovable","setFriction","gameHeight","bridgeSprites","yFromDirection","from_top","bridge","levelName","level","call","tilemap","tileset","addTilesetImage","createLayer","update","Scene","type","CANVAS","parent","backgroundColor","default","arcade","gravity","Game","useState","refBox","setRefBox","useEffect","offsetWidth","className","css","root","ref","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0de90e7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__D1GZz\",\"game\":\"style_game__1is8e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__28lIV\"};","export const settingsConfig = {\n  gravity: 500,\n  maxXVelocity: 800,\n  startedXVelocity: 250,\n  flyXVelocity: 2,\n  jumpVelocity: 300,\n  inertia: 100,\n\n  wallJumpXVelocity: 500,\n  wallJumpYVelocity: 400,\n\n  moveBlockTime: 500, //ms\n  playerBounce: 0.2,\n\n  playerAcceleration: (delta: number) => delta / 2,\n\n  dialogWrapperMoveTime: 800,\n\n  portraits: {\n    width: 150,\n    height: 170,\n    y: 10,\n  },\n  dialog: {\n    buttons: {\n      width: 100,\n      height: 100,\n      margin: {\n        top: 10,\n        right: 15,\n      },\n    },\n    colors: {\n      names: \"red\",\n      text: \"white\",\n    },\n\n    triggerDebug: true,\n  },\n\n  bridges: {\n    animation: {\n      ease: \"Quad.easeInOut\",\n      duration: 1000,\n    },\n  },\n};\n","export const storyConfig = {\n  characters: {\n    tal: {\n      NAME: \"TAL\",\n      PORTRAIT: \"tal\",\n    },\n  },\n};\n","import { Scene } from \"phaser\";\nimport { PreloadTypes } from \"game/type\";\n\nexport function preloadData(this: Scene, data: PreloadTypes) {\n  debugger;\n  Object.keys(data).forEach((key) => {\n    const method = key as keyof PreloadTypes;\n    const assets = data[method];\n\n    assets?.forEach((content) => {\n      // @ts-ignore: Unreachable code error\n      const result = this.load[method](...content);\n    });\n  });\n}\n","import { DialogList } from \"game/type\";\nimport { storyConfig } from \"../../game/storyConfig\";\n\nconst { tal } = storyConfig.characters;\n\nexport const dialogs: DialogList = [\n  [\n    {\n      portrait: tal.PORTRAIT,\n      name: tal.NAME,\n      replica: \"Dialog #1\",\n    },\n    {\n      portrait: tal.PORTRAIT,\n      name: tal.NAME,\n      replica: \"Dialog #2\",\n    },\n    {\n      portrait: tal.PORTRAIT,\n      name: tal.NAME,\n      replica:\n        \"Dialog #3 (long): ----------- ############# ---------------------------- +++++++++++++++++++++++++++++++++++ $$$$$$$$$$$$$$$$$$$$ #################### ######################## ##########################\",\n    },\n    {\n      portrait: tal.PORTRAIT,\n      name: tal.NAME,\n      replica: \"Dialog #4\",\n    },\n  ],\n];\n","import { PreloadTypes } from \"game/type\";\nimport { storyConfig } from \"../../game/storyConfig\";\n\nexport const assets = \"assets/\";\n\nconst { tal } = storyConfig.characters;\n\nexport const gameResourcesData: PreloadTypes = {\n  image: [\n    [\"platforms32x32\", assets + \"platforms32x32.png\"],\n    [\"playerSprite\", assets + \"body.png\"],\n    [\"playerBody\", assets + \"ball.png\"],\n    [\"spark\", assets + \"env/spark.png\"],\n\n    [\"dialogCenter\", assets + \"ui/dialog-2.png\"],\n    [\"dialogLeft\", assets + \"ui/dialog-1.png\"],\n    [\"dialogRight\", assets + \"ui/dialog-3.png\"],\n    [\"dialogNextButton\", assets + \"ui/dialog-button-next.png\"],\n    [\"dialogSkipButton\", assets + \"ui/dialog-button-skip.png\"],\n\n    //portraits\n    [tal.PORTRAIT, assets + \"portraits/TAL/portrait.png\"],\n  ],\n  spritesheet: [\n    [\n      \"coin\",\n      assets + \"env/coin.png\",\n      { frameWidth: 32, frameHeight: 32, endFrame: 9 },\n    ],\n  ],\n  atlas: [\n    [\"teleport\", assets + \"teleport.png\", assets + \"teleport_atlas.json\"],\n    [\"buttons\", assets + \"buttons.png\", assets + \"buttons.json\"],\n    [\"bridges\", assets + \"bridget.png\", assets + \"bridget.json\"],\n    [\"button\", assets + \"env/button.png\", assets + \"env/button.json\"],\n  ],\n  tilemapTiledJSON: [],\n};\n","import { PlayerParamsConfig } from \"game/type\";\nimport { settingsConfig } from \"../../game\";\nimport DefaultScene from \"../Default\";\n\nexport class Player {\n  cursors?: Phaser.Types.Input.Keyboard.CursorKeys;\n  playerBody!: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n  playerVisual!: Phaser.GameObjects.Sprite;\n  camera!: Phaser.Cameras.Scene2D.Camera;\n  playerParamsConfig: PlayerParamsConfig = {\n    blockMove: {\n      left: {\n        blocked: false,\n        time: 0,\n      },\n      right: {\n        blocked: false,\n        time: 0,\n      },\n    },\n  };\n  coordinates = {\n    x: 0,\n    y: 0,\n  };\n\n  constructor(scene: DefaultScene) {\n    const { world, map } = scene;\n\n    if (map && world) {\n      this.createPlayer(scene, map, world);\n      this.createCamera(scene, map, this.playerBody);\n    }\n    this.createTeleport(scene, this.playerBody);\n  }\n\n  createPlayer(\n    scene: DefaultScene,\n    map: Phaser.Tilemaps.Tilemap,\n    world: Phaser.Tilemaps.TilemapLayer,\n  ) {\n    const { playerBounce } = settingsConfig;\n    const layer = map.getObjectLayer(\"player\");\n    const playerData = layer?.objects[0];\n\n    this.playerBody = scene.physics.add\n      .sprite(playerData?.x || 0, playerData?.y || 0, \"playerSprite\")\n      .setAlpha(0);\n    this.playerVisual = scene.add.sprite(\n      this.playerBody.x,\n      this.playerBody.y,\n      \"playerBody\",\n    );\n    this.playerBody\n      .setBounce(playerBounce)\n      .setCircle(this.playerBody.width / 2);\n    scene.physics.add.collider(this.playerBody, world);\n    this.playerBody.body.setCollideWorldBounds(true);\n    scene.physics.world.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n    world.setCollisionByExclusion([-1], true);\n\n    this.cursors = scene.input.keyboard?.createCursorKeys();\n  }\n\n  createCamera(\n    scene: DefaultScene,\n    map: Phaser.Tilemaps.Tilemap,\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody,\n  ) {\n    this.camera = scene.cameras.main;\n    this.camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n    this.smoothMoveCameraTowards(player);\n  }\n\n  smoothMoveCameraTowards(\n    target: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody | null,\n    smoothFactor?: number,\n  ) {\n    if (this.camera && target) {\n      if (smoothFactor === undefined) {\n        smoothFactor = 0;\n      }\n      this.camera.scrollX =\n        smoothFactor * this.camera.scrollX +\n        (1 - smoothFactor) * (target.x - this.camera.width * 0.5);\n      this.camera.scrollY =\n        smoothFactor * this.camera.scrollY +\n        (1 - smoothFactor) * (target.y - this.camera.height * 0.5);\n    }\n  }\n\n  createTeleport(\n    scene: DefaultScene,\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody,\n  ) {\n    scene.anims.create({\n      key: \"teleportAnimation\",\n      frames: \"teleport\",\n      frameRate: 20,\n      repeat: 0,\n    });\n    scene.input.keyboard?.on(\"keydown-ENTER\", () => {\n      this.coordinates = {\n        x: player.x || 0,\n        y: player.y || 0,\n      };\n    });\n\n    scene.input.keyboard?.on(\"keydown-SPACE\", () => {\n      const { x, y } = this.coordinates;\n      if (player) {\n        player.x = x;\n        player.y = y;\n      }\n\n      const sprite = scene.add\n        .sprite(x, y, \"teleport\")\n        .play(\"teleportAnimation\")\n        .on(\"complete\", () => {\n          sprite.destroy();\n        });\n    });\n  }\n\n  update(time: number, delta: number, isBlocked?: boolean) {\n    this.control(delta, time, isBlocked);\n    this.resetBlockMove(time);\n    this.controlPlayerBody(delta);\n    this.smoothMoveCameraTowards(this.playerBody, 0.9);\n  }\n\n  controlPlayerBody(delta: number) {\n    this.playerVisual.x = this.playerBody.x;\n    this.playerVisual.y = this.playerBody.y;\n\n    if (this.playerBody.body.velocity.x) {\n      this.playerVisual.angle +=\n        delta * 0.003 * this.playerBody.body.velocity.x;\n    }\n  }\n\n  control(delta: number, time: number, isBlocked?: boolean) {\n    const {\n      maxXVelocity,\n      startedXVelocity,\n      flyXVelocity,\n      wallJumpXVelocity,\n      wallJumpYVelocity,\n      jumpVelocity,\n      inertia,\n      playerAcceleration,\n    } = settingsConfig;\n\n    const { velocity } = this.playerBody.body;\n    const oldVelocityX = velocity.x;\n\n    ///---- Left\n    if (\n      this.cursors?.left.isDown &&\n      !this.playerParamsConfig.blockMove.left.blocked &&\n      !isBlocked\n    ) {\n      if (!this.playerBody.body.blocked.none) {\n        if (oldVelocityX === 0) {\n          velocity.x = -startedXVelocity;\n        } else if (oldVelocityX > 0) {\n          velocity.x = oldVelocityX * -1;\n        } else if (velocity.x > maxXVelocity * -1) {\n          velocity.x -= playerAcceleration(delta);\n        } else if (velocity.x >= maxXVelocity * -1) {\n          velocity.x = maxXVelocity * -1;\n        }\n      } else {\n        velocity.x -= flyXVelocity;\n      }\n\n      ///---- Right\n    } else if (\n      this.cursors?.right.isDown &&\n      !this.playerParamsConfig.blockMove.right.blocked &&\n      !isBlocked\n    ) {\n      if (!this.playerBody.body.blocked.none) {\n        if (oldVelocityX === 0) {\n          velocity.x = startedXVelocity;\n        } else if (oldVelocityX < 0) {\n          velocity.x = oldVelocityX * -1;\n        } else if (velocity.x < maxXVelocity) {\n          velocity.x += playerAcceleration(delta);\n        } else if (velocity.x >= maxXVelocity) {\n          velocity.x = maxXVelocity;\n        }\n      } else {\n        velocity.x += flyXVelocity;\n      }\n      ///---- None\n    } else {\n      if (this.playerBody.body.blocked.down) {\n        if (velocity.x > inertia) {\n          velocity.x -= delta * 2;\n        } else if (velocity.x < -inertia) {\n          velocity.x += delta * 2;\n        } else {\n          velocity.x = 0;\n        }\n      }\n    }\n\n    ///---- Up\n    if (this.cursors?.up.isDown && !isBlocked) {\n      if (this.playerBody.body.blocked.left) {\n        this.setBlockMove(\"left\", time);\n        this.playerBody.setVelocityX(Math.max(wallJumpXVelocity, oldVelocityX));\n        this.playerBody.setVelocityY(-wallJumpYVelocity);\n      } else if (this.playerBody.body.blocked.right) {\n        this.setBlockMove(\"right\", time);\n        this.playerBody.setVelocityX(\n          Math.min(-wallJumpXVelocity, oldVelocityX),\n        );\n        this.playerBody.setVelocityY(-wallJumpYVelocity);\n      } else if (this.playerBody.body.blocked.down) {\n        this.playerBody.setVelocityY(-jumpVelocity);\n      }\n    }\n  }\n  setBlockMove(direction: keyof PlayerParamsConfig[\"blockMove\"], time: number) {\n    const { blockMove } = this.playerParamsConfig;\n    blockMove[direction].blocked = true;\n    blockMove[direction].time = time;\n  }\n\n  resetBlockMove(time: number) {\n    const { moveBlockTime } = settingsConfig; //ms\n    const { left, right } = this.playerParamsConfig.blockMove;\n\n    const canLeftMove = time - left.time > moveBlockTime;\n\n    const canRightMove = time - right.time > moveBlockTime;\n\n    if (canLeftMove) {\n      left.blocked = false;\n    }\n\n    if (canRightMove) {\n      right.blocked = false;\n    }\n  }\n}\n","import {\n  ActiveDialog,\n  DialogList,\n  DialogProperties,\n  IgnoredDialogs,\n  Tweens,\n} from \"game/type\";\nimport { Extensions } from \".\";\nimport DefaultScene from \"../Default\";\nimport { settingsConfig } from \"game/modules/game\";\n\nexport class Dialog {\n  scene: DefaultScene;\n  extensions: Extensions;\n\n  wrapper: Phaser.GameObjects.Container;\n  tweens: Tweens;\n\n  activeDialog: ActiveDialog | null = null;\n  sceneDialogs: DialogList;\n  sceneId: number;\n\n  constructor(scene: DefaultScene, dialogs: DialogList, sceneId: number) {\n    this.sceneId = sceneId;\n    this.sceneDialogs = dialogs;\n    this.scene = scene;\n    this.extensions = scene.extensions;\n\n    const { width, height } = scene.game.config;\n    const sceneWidth = Number(width);\n\n    const leftBGFrame = scene.add.sprite(0, 0, \"dialogLeft\").setOrigin(0, 0);\n    const rightBGFrame = scene.add\n      .sprite(sceneWidth, 0, \"dialogRight\")\n      .setOrigin(0, 0);\n    rightBGFrame.setPosition(\n      rightBGFrame.x - rightBGFrame.width,\n      rightBGFrame.y,\n    );\n    const { buttons } = settingsConfig.dialog;\n\n    const nextButton = scene.add\n      .sprite(\n        sceneWidth - buttons.margin.right,\n        buttons.margin.top,\n        \"dialogNextButton\",\n      )\n      .setInteractive()\n      .setScrollFactor(0)\n      .setOrigin(1, 0);\n    const skipButton = scene.add\n      .sprite(\n        sceneWidth - buttons.margin.right,\n        buttons.margin.top * 2 + buttons.height,\n        \"dialogSkipButton\",\n      )\n      .setInteractive()\n      .setScrollFactor(0)\n      .setOrigin(1, 0);\n    // this.extensions.imgFit(nextButton, buttons.width, buttons.height); //fit img to config size\n    // this.extensions.imgFit(skipButton, buttons.width, buttons.height); //fit img to config size\n\n    const { nextDialog, dialogEnd } = this;\n    const nextButtonClick = nextDialog.bind(this);\n    const skipButtonClick = dialogEnd.bind(this, true);\n    nextButton.on(\"pointerup\", nextButtonClick);\n    skipButton.on(\"pointerup\", skipButtonClick);\n\n    const centerBG = scene.add\n      .tileSprite(\n        leftBGFrame.width,\n        0,\n        sceneWidth - leftBGFrame.width - rightBGFrame.width,\n        rightBGFrame.height,\n        \"dialogCenter\",\n      )\n      .setOrigin(0, 0);\n\n    this.wrapper = scene.add\n      .container(0, 0)\n      .add([leftBGFrame, rightBGFrame, centerBG, nextButton, skipButton])\n      .setScrollFactor(0)\n      .setPosition(0, -centerBG.height);\n\n    const hideTween = scene.tweens.create({\n      targets: this.wrapper,\n\n      y: -centerBG.height,\n      ease: \"Quad.easeInOut\",\n      repeat: 0,\n      duration: settingsConfig.dialogWrapperMoveTime,\n    });\n\n    const showTween = scene.tweens.create({\n      targets: this.wrapper,\n      y: 0,\n      ease: \"Quad.easeInOut\",\n      repeat: 0,\n      duration: settingsConfig.dialogWrapperMoveTime,\n    });\n\n    this.tweens = {\n      hide: hideTween,\n      show: showTween,\n    };\n\n    this.createDialogTriggers(scene.map);\n  }\n\n  tweensPlay(\n    tween: Phaser.Tweens.Tween | Phaser.Tweens.Tween[],\n    onComplete?: () => void,\n  ) {\n    let current: Phaser.Tweens.Tween;\n    if (Array.isArray(tween)) current = tween[0];\n    else current = tween;\n    if (onComplete) {\n      current.once(\"complete\", () => {\n        onComplete && onComplete();\n      });\n    }\n    current.play();\n  }\n\n  showDialog(onComplete?: () => void) {\n    if (this.activeDialog) {\n      this.activeDialog.isActive = true;\n    }\n\n    this.tweensPlay(this.tweens.show, onComplete);\n  }\n\n  hideDialog(onComplete?: () => void) {\n    if (this.activeDialog) {\n      this.activeDialog.isActive = false;\n    }\n    this.tweensPlay(this.tweens.hide, onComplete);\n  }\n\n  createConversation(dialogId: number) {\n    const activeDialog = this.sceneDialogs[dialogId];\n    if (activeDialog) {\n      this.activeDialog = {\n        dialog: activeDialog,\n        replica: 0,\n        id: dialogId,\n        objects: {},\n      };\n\n      const { name, portrait, replica } = activeDialog[0];\n      this.createPortrait(portrait);\n      this.createName(name);\n      this.createText(replica);\n\n      this.showDialog();\n    }\n  }\n\n  createPortrait(imgName: string) {\n    const { height, width, y } = settingsConfig.portraits;\n    const firstFrame = this.wrapper.list[0];\n    const portrait = this.scene.add\n      //@ts-ignore\n      .image(firstFrame.width || 25, y, imgName)\n      .setOrigin(0);\n\n    this.extensions.imgFit(portrait, width, height);\n\n    this.wrapper.add(portrait);\n\n    if (this.activeDialog) {\n      this.activeDialog.objects.portrait = portrait;\n    }\n  }\n\n  createName(name: string) {\n    const { height, width } = settingsConfig.portraits;\n\n    const text = this.scene.make.text({\n      x: 0,\n      y: 0,\n      text: name,\n      origin: { x: 0.5, y: 0 },\n      style: {\n        font: \"25px Arial\",\n        color: settingsConfig.dialog.colors.names,\n        wordWrap: {\n          width: width,\n          useAdvancedWrap: true,\n        },\n      },\n    });\n\n    text.x = 25 + width / 2;\n    text.y = height + 30;\n\n    this.wrapper.add(text);\n\n    if (this.activeDialog) {\n      this.activeDialog.objects.name = text;\n    }\n  }\n\n  createText(replica: string) {\n    const { y, width: portraitWidth } = settingsConfig.portraits;\n    const { buttons, colors } = settingsConfig.dialog;\n    const textMargin = 50;\n    const text = this.scene.make.text({\n      x: portraitWidth + textMargin,\n      y: y * 2,\n      text: replica,\n      origin: { x: 0, y: 0 },\n      style: {\n        font: \"bold 25px Arial\",\n        color: colors.text,\n        wordWrap: {\n          width:\n            Number(this.scene.game.config.width) -\n            textMargin * 2 -\n            portraitWidth -\n            buttons.width,\n          useAdvancedWrap: true,\n        },\n      },\n    });\n\n    this.wrapper.add(text);\n\n    if (this.activeDialog) {\n      this.activeDialog.objects.text = text;\n    }\n  }\n\n  clearDialog() {\n    if (this.activeDialog) {\n      const { objects } = this.activeDialog;\n\n      objects.name?.destroy();\n      objects.portrait?.destroy();\n      objects.text?.destroy();\n    }\n  }\n\n  nextDialog() {\n    if (this.activeDialog) {\n      const { dialog, replica } = this.activeDialog;\n      const actualReplicaNumber = replica + 1;\n\n      if (actualReplicaNumber < dialog.length) {\n        const {\n          name,\n          portrait,\n          replica: valueOfReplica,\n        } = dialog[actualReplicaNumber];\n        this.clearDialog();\n\n        this.createPortrait(portrait);\n        this.createName(name);\n        this.createText(valueOfReplica);\n\n        this.activeDialog.replica = actualReplicaNumber;\n      } else {\n        this.dialogEnd();\n      }\n    }\n  }\n\n  dialogEnd(isSkip?: boolean) {\n    if (this.activeDialog) {\n      const { dialog, replica, id: dialogId } = this.activeDialog;\n      const actualReplicaElement = dialog[replica] || dialog[dialog.length - 1];\n      actualReplicaElement.callback && actualReplicaElement.callback();\n      this.closeDialog();\n\n      if (isSkip && (dialogId || dialogId === 0)) {\n        const ignoredDialogs: IgnoredDialogs = JSON.parse(\n          localStorage.getItem(\"ignoredDialogs\") || \"[]\",\n        );\n        const actualSceneIgnored = ignoredDialogs[this.sceneId] || [];\n        actualSceneIgnored.push(dialogId);\n\n        const newActualIgnored = [...new Set(actualSceneIgnored)];\n        ignoredDialogs[this.sceneId] = newActualIgnored;\n\n        localStorage.setItem(\"ignoredDialogs\", JSON.stringify(ignoredDialogs));\n      }\n    }\n  }\n\n  closeDialog() {\n    const { clearDialog } = this;\n    this.hideDialog(clearDialog.bind(this));\n  }\n\n  createTrigger(x: number, y: number, width: number, height: number) {\n    const debug = settingsConfig.dialog.triggerDebug;\n    return this.scene.extensions.createRectangle(\n      x,\n      y,\n      width,\n      height,\n      0x00ff00,\n      debug ? 0.3 : 0,\n    );\n  }\n\n  createDialogTriggers(map: Phaser.Tilemaps.Tilemap | null) {\n    if (map) {\n      const layer = map.getObjectLayer(\"dialogs\");\n      const triggerObjects = layer?.objects;\n\n      triggerObjects?.forEach(\n        ({ x = -100, y = -100, width = 32, height = 32, properties }) => {\n          const props: DialogProperties[] = properties;\n          const dialogId = Number(\n            props.find((value) => value.name === \"id\")?.value,\n          );\n\n          const trigger = this.scene.add.zone(x, y, width, height).setOrigin(0);\n          this.scene.physics.world.enable(trigger);\n          //@ts-ignore\n          trigger.body.setAllowGravity(false);\n\n          //@ts-ignore\n          trigger.body.moves = false;\n\n          const { player } = this.scene;\n          if (player?.playerBody) {\n            this.scene.physics.add.overlap(player.playerBody, trigger, () => {\n              this.createConversation(dialogId);\n              trigger.destroy();\n            });\n          }\n        },\n      );\n    }\n  }\n}\n","import { Scene } from \"phaser\";\n\nimport {\n  ObjectWithCorners,\n  TiledObjectProperties,\n  UnpackedTiledObjectProperties,\n} from \"game/type\";\n\nexport class Extensions {\n  scene: Scene;\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n  }\n\n  imgFit(img: Phaser.GameObjects.Image, maxWidth: number, maxHeight: number) {\n    const widthScale = maxWidth / img.width;\n    const heightScale = maxHeight / img.height;\n\n    const scale = Math.min(widthScale, heightScale, 1);\n\n    img.setScale(scale);\n  }\n\n  createRectangle(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    color: number,\n    alpha: number,\n  ) {\n    return this.scene.add\n      .graphics()\n      .fillStyle(color, alpha)\n      .fillRect(x, y, width, height);\n  }\n\n  getPropsFromObject<Return = UnpackedTiledObjectProperties>(\n    props: TiledObjectProperties[],\n  ) {\n    return props.reduce((acm, { name, value }) => {\n      return {\n        ...acm,\n        [name]: value,\n      };\n    }, {} as Return);\n  }\n\n  findCorners(list: ObjectWithCorners[]) {\n    const upLeftX = Math.min.apply(\n      null,\n      list.reduce((acm: number[], { x }) => {\n        acm.push(x);\n        return acm;\n      }, []),\n    );\n    const upLeftY = Math.min.apply(\n      null,\n      list.reduce((acm: number[], { y }) => {\n        acm.push(y);\n        return acm;\n      }, []),\n    );\n\n    const upRightX = Math.max.apply(\n      null,\n      list.reduce((acm: number[], { x, width }) => {\n        acm.push(x + width);\n        return acm;\n      }, []),\n    );\n    const upRightY = Math.max.apply(\n      null,\n      list.reduce((acm: number[], { y, height }) => {\n        acm.push(y + height);\n        return acm;\n      }, []),\n    );\n\n    const maxY = Math.max.apply(\n      null,\n      list.reduce((acm: number[], { y }) => {\n        acm.push(y);\n        return acm;\n      }, []),\n    );\n\n    const rectWidth = upRightX - upLeftX;\n    const rectHeight = upRightY - upLeftY;\n    const x = upLeftX;\n    const y = maxY;\n\n    return {\n      x,\n      y,\n      rectWidth,\n      rectHeight,\n    };\n  }\n}\n","export function createGuard<Type>(checkedKey: string) {\n  return function (value: Type | any): value is Type {\n    if (!value) {\n      return false;\n    }\n\n    //@ts-ignore\n    const result = (value as Type)[checkedKey];\n\n    return !!result || result === 0;\n  };\n}\n\nexport default createGuard;\n","import { createGuard, createTimeouts } from \"utils\";\n\nimport DefaultScene from \"../Default\";\nimport {\n  ButtonProps,\n  BridgetProps,\n  ButtonTexture,\n  LevelState,\n  ObjectWithCorners,\n} from \"game/type\";\nimport { settingsConfig } from \"game/modules/game\";\n\nconst arcadeBodyGuard = createGuard<Phaser.Physics.Arcade.Body>(\"setVelocity\");\nconst { duration, ease } = settingsConfig.bridges.animation;\n\nexport class Level {\n  constructor(scene: DefaultScene) {\n    this.scene = scene;\n\n    const map = scene.map;\n    const player = scene.player?.playerBody;\n\n    if (map && player) {\n      this.createButtons(scene, map, player);\n      this.createWalls(scene, map, player);\n      this.createCoins(scene, map, player);\n      // this.createFinish(scene, map, player);\n    }\n  }\n  private scene: DefaultScene;\n  private state: LevelState = {};\n  overlap = false;\n\n  private createButtons(\n    scene: DefaultScene,\n    map: Phaser.Tilemaps.Tilemap,\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody,\n  ) {\n    const bridgetButtonsLayer = map.getObjectLayer(\"buttons\");\n    const bridgetButtonsList = bridgetButtonsLayer?.objects;\n\n    const [defaultButton, pushedButton] = scene.textures\n      .get(\"button\")\n      .getFrameNames() as ButtonTexture[];\n\n    bridgetButtonsList?.forEach(\n      ({ x = -100, y = -100, width = -100, height = -100, properties }, i) => {\n        const props: ButtonProps =\n          scene.extensions.getPropsFromObject(properties);\n\n        const btnX = x + width / 2,\n          btnY = y + height;\n        const button = props.invisible\n          ? null\n          : scene.add\n              .sprite(btnX, btnY, \"button\", defaultButton)\n              .setOrigin(0.5, 1);\n\n        const buttonZone = scene.add.zone(x, y, width, height).setOrigin(0, 0);\n        scene.physics.world.enable(\n          buttonZone,\n          Phaser.Physics.Arcade.STATIC_BODY,\n        );\n\n        if (arcadeBodyGuard(buttonZone)) {\n          buttonZone.setAllowGravity(false);\n        }\n\n        scene.physics.add.overlap(player, buttonZone, () => {\n          this.overlap = true;\n          setTimeout(() => {\n            this.overlap = false;\n          }, 5);\n          button?.setTexture(\"button\", pushedButton);\n\n          if (props.is_wall) this.activateWall(scene, map, player, props.id);\n          else this.activateBridge(scene, map, player, props.id);\n          buttonZone.destroy();\n        });\n      },\n    );\n  }\n\n  private createFinish(\n    scene: DefaultScene,\n    map: Phaser.Tilemaps.Tilemap,\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody,\n  ) {\n    const layer = map.getObjectLayer(\"finish\");\n    const finishList = layer?.objects;\n    const texture = scene.textures.get(\"finish\").getFrameNames();\n\n    finishList?.forEach(\n      ({ x = -100, y = -100, width = -100, height = -100, properties }) => {\n        const finish = scene.add\n          .tileSprite(x, y, width, height, \"buttons\", texture[0])\n          .setOrigin(0, 1);\n        scene.physics.world.enable(finish);\n        if (arcadeBodyGuard(finish.body)) {\n          finish.body.setAllowGravity(false);\n        }\n\n        scene.physics.add.overlap(player, finish, () => {\n          // FINISH HERE\n        });\n      },\n    );\n  }\n\n  private createCoins(\n    scene: DefaultScene,\n    map: Phaser.Tilemaps.Tilemap,\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody,\n  ) {\n    const animation = scene.anims.create({\n      key: \"coinAnimation\",\n      frames: \"coin\",\n      frameRate: 10,\n      repeat: -1,\n    });\n    const fireworks = scene.add.particles(0, 0, \"spark\", {\n      frame: \"spark\",\n      speed: { min: 0, max: 80 },\n      angle: { min: 0, max: 360 },\n      scale: { start: 0.5, end: 0 },\n      blendMode: \"ADD\",\n      lifespan: 500,\n      rotate: { min: -180, max: 180 },\n      emitting: false,\n    });\n\n    const coinsLayer = map.getObjectLayer(\"coins\");\n\n    const coins = coinsLayer?.objects.map(({ x = 0, y = 0, width, height }) => {\n      const sprite = scene.add.sprite(x, y, \"coin\", 0).setOrigin(0, 1);\n      sprite.play(\"coinAnimation\");\n\n      this.scene.physics.world.enable(\n        sprite,\n        Phaser.Physics.Arcade.STATIC_BODY,\n      );\n\n      scene.physics.add.overlap(player, sprite, () => {\n        this.overlap = true;\n        setTimeout(() => {\n          this.overlap = false;\n        }, 5);\n\n        const { x, y, width, height } = sprite;\n        fireworks.explode(100, x + width / 2, y - height / 2);\n        sprite.destroy();\n        // ADD +1 COIN HERE\n      });\n    });\n  }\n\n  private createWalls(\n    scene: DefaultScene,\n    map: Phaser.Tilemaps.Tilemap,\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody,\n  ) {\n    const layer = map.getObjectLayer(\"walls\");\n    const bridgesList = layer?.objects;\n    const textures = scene.textures.get(\"bridges\").getFrameNames();\n\n    const bridges: Record<\n      string,\n      { sprite: Phaser.GameObjects.TileSprite; props: BridgetProps }[]\n    > = {};\n\n    bridgesList?.forEach(\n      ({ x = -100, y = -100, width = 0, height = 0, properties }, i) => {\n        const props: BridgetProps =\n          scene.extensions.getPropsFromObject(properties);\n\n        if (props.id === undefined) return;\n\n        const block = scene.add\n          .tileSprite(x, y + height, width, height, \"bridges\", textures[0])\n          .setOrigin(0, 1);\n\n        if (!bridges[props.id]) bridges[props.id] = [];\n\n        bridges[props.id].push({ props, sprite: block });\n      },\n    );\n\n    Object.entries(bridges).forEach(([id, blocks]) => {\n      const { x, y, rectWidth, rectHeight } = scene.extensions.findCorners(\n        blocks.map(({ sprite }) => sprite),\n      );\n\n      const bridgeBody = scene.add\n        .zone(x, y, rectWidth, rectHeight)\n        .setOrigin(0, 1);\n      this.scene.physics.world.enable(\n        bridgeBody,\n        Phaser.Physics.Arcade.STATIC_BODY,\n      );\n\n      if (arcadeBodyGuard(bridgeBody.body)) {\n        bridgeBody.body.setAllowGravity(false).setImmovable().setFriction(0, 0);\n        bridgeBody.body.moves = false;\n      }\n      scene.physics.add.collider(player, bridgeBody, () => {});\n\n      this.state[id] = {\n        body: bridgeBody,\n        bridges: blocks,\n      };\n    });\n  }\n\n  private activateBridge(\n    scene: DefaultScene,\n    map: Phaser.Tilemaps.Tilemap,\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody,\n    id?: string | number,\n  ) {\n    if (id === undefined) {\n      return;\n    }\n\n    const layer = map.getObjectLayer(\"bridges\");\n    const bridgesList = layer?.objects;\n    const textures = scene.textures.get(\"bridges\").getFrameNames();\n\n    const gameHeight = Number(map.heightInPixels);\n    const bridgeSprites: ObjectWithCorners[] = [];\n\n    bridgesList?.forEach(\n      ({ x = -100, y = -100, width = 0, height = 0, properties }, i) => {\n        const props =\n          scene.extensions.getPropsFromObject<BridgetProps>(properties);\n\n        if (props.id === id) {\n          const yFromDirection = props.from_top\n            ? -height * 2\n            : gameHeight + height * 2;\n\n          const bridge = scene.add\n            .tileSprite(\n              x,\n              yFromDirection,\n              width,\n              height,\n              \"bridges\",\n              textures[0],\n            )\n            .setOrigin(0, 0);\n\n          bridgeSprites.push({ ...bridge, y });\n\n          const bridgeAnimation = scene.tweens.add({\n            targets: bridge,\n            y,\n            ease,\n            duration,\n            repeat: 0,\n          });\n        }\n      },\n    );\n\n    setTimeout(() => {\n      const { x, y, rectWidth, rectHeight } =\n        scene.extensions.findCorners(bridgeSprites);\n      const bridgeBody = scene.add\n        .zone(x, y, rectWidth, rectHeight)\n        .setOrigin(0, 0);\n      this.scene.physics.world.enable(\n        bridgeBody,\n        Phaser.Physics.Arcade.STATIC_BODY,\n      );\n\n      if (arcadeBodyGuard(bridgeBody.body)) {\n        bridgeBody.body.setAllowGravity(false).setImmovable().setFriction(0, 0);\n        bridgeBody.body.moves = false;\n      }\n\n      scene.physics.add.collider(player, bridgeBody, () => {});\n    }, duration);\n  }\n  private activateWall(\n    scene: DefaultScene,\n    map: Phaser.Tilemaps.Tilemap,\n    player: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody,\n    id?: string | number,\n  ) {\n    if (!id) return;\n\n    const gameHeight = Number(map.heightInPixels);\n\n    const { body, bridges } = this.state[id];\n\n    body.destroy();\n\n    bridges.forEach(({ props, sprite }) => {\n      const y = props.from_top\n        ? -(sprite.height + 100)\n        : Number(gameHeight) + sprite.height + 100;\n\n      const animation = scene.tweens.add({\n        targets: sprite,\n        y,\n        ease,\n        duration,\n        repeat: 0,\n      });\n    });\n  }\n}\n","import DefaultScene from \"../scenes/Default\";\n\nexport class Level extends DefaultScene {\n  constructor() {\n    super(\"ex_0\");\n  }\n}\n","import { Scene } from \"phaser\";\n\nimport { preloadData } from \"../game\";\nimport { assets, dialogs, gameResourcesData } from \"./assets\";\nimport { Dialog, Extensions, Level, Player } from \"./modules\";\n\nexport default class DefaultScene extends Scene {\n  player: Player | null = null;\n  dialog: Dialog | null = null;\n  level: Level | null = null;\n  extensions!: Extensions;\n\n  map: Phaser.Tilemaps.Tilemap | null = null;\n  world: Phaser.Tilemaps.TilemapLayer | null = null;\n\n  private levelName: string;\n\n  constructor(levelName: string) {\n    super({ key: levelName });\n\n    this.levelName = levelName;\n  }\n\n  preload() {\n    this.extensions = new Extensions(this);\n    preloadData.call(this, {\n      ...gameResourcesData,\n      tilemapTiledJSON: [\n        //@ts-ignore\n        ...gameResourcesData.tilemapTiledJSON,\n        [\"map\", assets + `levels/${this.levelName}.json`],\n      ],\n    });\n  }\n\n  create() {\n    this.map = this.make.tilemap({ key: \"map\" });\n    const tileset = this.map.addTilesetImage(\n      \"platforms32x32\",\n      \"platforms32x32\",\n    );\n    if (!tileset) throw `wrong tileset data: ${JSON.stringify(tileset)}`;\n    this.world = this.map.createLayer(0, tileset, 0, 0);\n\n    this.player = new Player(this);\n    this.dialog = new Dialog(this, dialogs, 0);\n    this.level = new Level(this);\n  }\n\n  update(time: number, delta: number) {\n    this.player?.update(\n      time,\n      delta,\n      this.dialog?.activeDialog?.isActive || this.level?.overlap,\n    );\n  }\n}\n","import { settingsConfig } from \"../game/settingsConfig\";\nimport { Level } from \"../levels\";\n\nexport const config: Phaser.Types.Core.GameConfig = {\n  type: Phaser.CANVAS,\n  parent: \"game-box\",\n  height: 720,\n  width: 1280,\n  scene: [Level],\n  backgroundColor: 0x14003b,\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: { y: settingsConfig.gravity },\n      debug: true,\n    },\n  },\n};\n","import { useEffect, useLayoutEffect, useState } from \"react\";\n\nimport { renderGame } from \"./instance\";\nimport css from \"./style.module.css\";\n\nlet game: Phaser.Game | null = null;\n\nexport const Game = () => {\n  const [refBox, setRefBox] = useState<HTMLDivElement | null>(null);\n\n  // useLayoutEffect(() => {\n  //   if (refBox) {\n  //     game = renderGame(refBox.offsetWidth);\n  //   }\n  // }, [refBox]);\n\n  useEffect(() => {\n    if (refBox) {\n      setTimeout(() => {\n        game = renderGame(refBox.offsetWidth);\n      }, 0);\n    }\n\n    return () => {\n      game?.destroy(true, false);\n    };\n  });\n\n  return (\n    <div className={css.root}>\n      <div\n        className={css.game}\n        id=\"game-box\"\n        ref={(ref) => {\n          setRefBox(ref);\n        }}\n      />\n    </div>\n  );\n};\n","import Phaser from \"phaser\";\nimport { config } from \"./modules/service/config\";\n\nexport const renderGame = (w: number) => {\n  return new Phaser.Game(config);\n};\n","import css from \"./style.module.css\";\n\nimport { Game } from \"../../game\";\n\nfunction App() {\n  return (\n    <div className={css.root}>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./containers\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}